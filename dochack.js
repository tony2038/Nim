/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI36032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI179074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI40262 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI181532 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI71205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI71227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI71565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI71229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI73245 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI40250 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40258 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI36006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI53141 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI40208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40314 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI36016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI36040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI36042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI40308 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI40226 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40228 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40242 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI40246 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI40246 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40246.node = NNI40246;
var NNI40242 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40242.node = NNI40242;
var NNI40228 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40228.node = NNI40228;
NTI40308.base = NTI40226;
NTI40314.base = NTI40226;
var NNI40226 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI40308, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI36042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI36040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI36040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI36016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI40314, name: "up", sons: null}]};
NTI40226.node = NNI40226;
var NNI40208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40208.node = NNI40208;
NTI40226.base = NTI40208;
NTI40228.base = NTI40226;
NTI40242.base = NTI40228;
NTI40246.base = NTI40242;
var NNI53141 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI36042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI36006, name: "Field1", sons: null}]};
NTI53141.node = NNI53141;
var NNI40258 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40258.node = NNI40258;
NTI40258.base = NTI40228;
var NNI40250 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40250.node = NNI40250;
NTI40250.base = NTI40228;
NTI71561.base = NTI71229;
NTI71563.base = NTI71229;
NTI71565.base = NTI71229;
var NNI71227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI71227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI71227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI71227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI71227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI71227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI71227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI71227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI71227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI71227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI71227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI71227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI71227, name: "NotationNode", len: 0, sons: null}}};
NTI71227.node = NNI71227;
var NNI71283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI36042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI36042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI36042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI36042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI36042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI36042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI36042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI36042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI36042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI36042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI36042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI36042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI36042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI36042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI36042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI36042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI36042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI36042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI36042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI36042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI36042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI36042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI36042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI36042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI36042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI36042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI36042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI36042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI36042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI36042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI36042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI36042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI36042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI36042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI36042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI36042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI36042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI36042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI36042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI36042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI36042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI36042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI36042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI36042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI36042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI36042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI36042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI36042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI36042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI36042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI36042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI36042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI36042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI36042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI36042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI36042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI36042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI36042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI36042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI36042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI36042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI36042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI36042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI36042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI36042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI36042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI36042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI36042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI36042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI36042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI36042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI36042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI36042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI36042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI36042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI36042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI36042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI36042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI36042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI36042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI36042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI36042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI36042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI36042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI36042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI36042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI36042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI36042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI36042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI36042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI36006, name: "zIndex", sons: null}]};
NTI71283.node = NNI71283;
NTI71283.base = NTI40208;
NTI71281.base = NTI71283;
var NNI71231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI71561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI71563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI71565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI36042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI71229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI71229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI71229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI36042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI71227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI36042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI71229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI71229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI36042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI71281, name: "style", sons: null}]};
NTI71231.node = NNI71231;
var NNI71205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI71372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI71376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI71380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI71384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI71388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI71392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI71396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI71400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI71404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI71408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI71412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI71416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI71420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI71424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI71428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI71432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI71436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI71440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI71444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI71448, name: "onunload", sons: null}]};
NTI71205.node = NNI71205;
NTI71205.base = NTI40208;
NTI71231.base = NTI71205;
NTI71229.base = NTI71231;
NTI73245.base = NTI71229;
NTI181532.base = NTI36042;
var NNI40262 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI40262.node = NNI40262;
NTI40262.base = NTI40228;
var NNI179074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI36006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI36032, name: "Field1", sons: null}]};
NTI179074.node = NNI179074;

function makeNimstrLit(c_53995) {
		  var ln = c_53995.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_53995.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_55027, src_55028, ti_55029) {
	var result_55219 = null;

		switch (ti_55029.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_55001(ti_55029))) {
			result_55219 = src_55028;
			}
			else {
				result_55219 = [src_55028[0], src_55028[1]];
			}
			
			break;
		case 19:
			      if (dest_55027 === null || dest_55027 === undefined) {
        dest_55027 = {};
      }
      else {
        for (var key in dest_55027) { delete dest_55027[key]; }
      }
      for (var key in src_55028) { dest_55027[key] = src_55028[key]; }
      result_55219 = dest_55027;
    
			break;
		case 18:
		case 17:
			if (!((ti_55029.base == null))) {
			result_55219 = nimCopy(dest_55027, src_55028, ti_55029.base);
			}
			else {
			if ((ti_55029.kind == 17)) {
			result_55219 = (dest_55027 === null || dest_55027 === undefined) ? {m_type: ti_55029} : dest_55027;
			}
			else {
				result_55219 = (dest_55027 === null || dest_55027 === undefined) ? {} : dest_55027;
			}
			}
			nimCopyAux(result_55219, src_55028, ti_55029.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_55028 === null) {
        result_55219 = null;
      }
      else {
        if (dest_55027 === null || dest_55027 === undefined) {
          dest_55027 = new Array(src_55028.length);
        }
        else {
          dest_55027.length = src_55028.length;
        }
        result_55219 = dest_55027;
        for (var i = 0; i < src_55028.length; ++i) {
          result_55219[i] = nimCopy(result_55219[i], src_55028[i], ti_55029.base);
        }
      }
    
			break;
		case 28:
			      if (src_55028 !== null) {
        result_55219 = src_55028.slice(0);
      }
    
			break;
		default: 
			result_55219 = src_55028;
			break;
		}

	return result_55219;

}

function arrayConstr(len_55271, value_55272, typ_55273) {
		    var result = new Array(len_55271);
    for (var i = 0; i < len_55271; ++i) result[i] = nimCopy(null, value_55272, typ_55273);
    return result;
  

	
}

function cstrToNimstr(c_54012) {
		  var ln = c_54012.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_54012.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_54012.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_54029) {
		  if (s_54029 === null) return "";
  var len = s_54029.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_54029[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_54029[i] < 128)
      asciiPart[i] = fcc(s_54029[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_53618, ename_53619) {
		e_53618.name = ename_53619;
		if ((excHandler == 0)) {
		unhandledException(e_53618);
		}
		
		e_53618.trace = nimCopy(null, raw_write_stack_trace_53438(), NTI36040);
		throw e_53618;

	
}

function addInt(a_54403, b_54404) {
		    var result = a_54403 + b_54404;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_55290, a_55291, b_55292) {
			var Tmp1;

	var result_55293 = 0;

	BeforeRet: do {
			if (!(a_55291 <= i_55290)) Tmp1 = false; else {				Tmp1 = (i_55290 <= b_55292);			}		if (Tmp1) {
		result_55293 = i_55290;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_55290, a_55291, b_55292);
		}
		
	} while (false);

	return result_55293;

}

function subInt(a_54421, b_54422) {
		    var result = a_54421 - b_54422;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_55309, a_55310, b_55311) {
			var Tmp1;

	var result_55312 = 0;

	BeforeRet: do {
			if (!(a_55310 <= i_55309)) Tmp1 = false; else {				Tmp1 = (i_55309 <= b_55311);			}		if (Tmp1) {
		result_55312 = i_55309;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_55312;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_54439, b_54440) {
		    var result = a_54439 * b_54440;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_54758, b_54759) {
		var Tmp1;

	var result_54760 = 0;

	BeforeRet: do {
		if ((b_54759 <= a_54758)) {
		Tmp1 = a_54758;
		}
		else {
		Tmp1 = b_54759;
		}
		
		result_54760 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_54760;

}

function nimMin(a_54740, b_54741) {
		var Tmp1;

	var result_54742 = 0;

	BeforeRet: do {
		if ((a_54740 <= b_54741)) {
		Tmp1 = a_54740;
		}
		else {
		Tmp1 = b_54741;
		}
		
		result_54742 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_54742;

}
var nim_program_result = 0;
var global_raise_hook_50418 = [null];
var local_raise_hook_50423 = [null];
var out_of_mem_hook_50426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_181285 = [null];

function is_fat_pointer_55001(ti_55003) {
	var result_55004 = false;

	BeforeRet: do {
		result_55004 = !((ConstSet1[ti_55003.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_55004;

}

function nimCopyAux(dest_55032, src_55033, n_55035) {
		switch (n_55035.kind) {
		case 0:
			break;
		case 1:
			      dest_55032[n_55035.offset] = nimCopy(dest_55032[n_55035.offset], src_55033[n_55035.offset], n_55035.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_55035.sons.length; i++) {
      nimCopyAux(dest_55032, src_55033, n_55035.sons[i]);
    }
    
			break;
		case 3:
			      dest_55032[n_55035.offset] = nimCopy(dest_55032[n_55035.offset], src_55033[n_55035.offset], n_55035.typ);
      for (var i = 0; i < n_55035.sons.length; ++i) {
        nimCopyAux(dest_55032, src_55033, n_55035.sons[i][1]);
      }
    
			break;
		}

	
}

function add_50438(x_50441, x_50441_Idx, y_50442) {
		      if (x_50441[x_50441_Idx] === null) { x_50441[x_50441_Idx] = []; }
      var off = x_50441[x_50441_Idx].length;
      x_50441[x_50441_Idx].length += y_50442.length;
      for (var i = 0; i < y_50442.length; ++i) {
        x_50441[x_50441_Idx][off+i] = y_50442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_53136(f_53138) {
					var Tmp3;

	var result_53139 = [null];

		var it_53147 = f_53138;
		var i_53149 = 0;
		var total_53151 = 0;
		var temp_frames_53158 = arrayConstr(64, {Field0: null, Field1: 0}, NTI53141);
		L1: do {
				L2: while (true) {
					if (!!((it_53147 == null))) Tmp3 = false; else {						Tmp3 = (i_53149 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_53158[i_53149].Field0 = it_53147.procname;
					temp_frames_53158[i_53149].Field1 = it_53147.line;
					i_53149 += 1;
					total_53151 += 1;
					it_53147 = it_53147.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_53147 == null))) break L5;
					total_53151 += 1;
					it_53147 = it_53147.prev;
				}
		} while(false);
		result_53139[0] = nimCopy(null, [], NTI36040);
		if (!((total_53151 == i_53149))) {
		if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(makeNimstrLit("(")); } else { result_53139[0] = makeNimstrLit("("); };
		if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(cstrToNimstr(((total_53151 - i_53149))+"")); } else { result_53139[0] = cstrToNimstr(((total_53151 - i_53149))+"").slice(); };
		if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_53139[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_53421 = 0;
			var colontmp__181426 = 0;
			colontmp__181426 = (i_53149 - 1);
			var res_181431 = colontmp__181426;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_181431)) break L8;
						j_53421 = res_181431;
						add_50438(result_53139, 0, temp_frames_53158[j_53421].Field0);
						if ((0 < temp_frames_53158[j_53421].Field1)) {
						if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(makeNimstrLit(", line: ")); } else { result_53139[0] = makeNimstrLit(", line: "); };
						if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(cstrToNimstr((temp_frames_53158[j_53421].Field1)+"")); } else { result_53139[0] = cstrToNimstr((temp_frames_53158[j_53421].Field1)+"").slice(); };
						}
						
						if (result_53139[0] != null) { result_53139[0] = (result_53139[0]).concat(makeNimstrLit("\x0A")); } else { result_53139[0] = makeNimstrLit("\x0A"); };
						res_181431 -= 1;
					}
			} while(false);
		} while(false);

	return result_53139[0];

}

function raw_write_stack_trace_53438() {
	var result_53440 = null;

		if (!((framePtr == null))) {
		result_53440 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_53136(framePtr) || []), NTI36040);
		}
		else {
			result_53440 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI36040);
		}
		

	return result_53440;

}

function unhandledException(e_53499) {
		var buf_53500 = [[]];
		if (!(((e_53499.message != null ? e_53499.message.length : 0) == 0))) {
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_53500[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(e_53499.message); } else { buf_53500[0] = e_53499.message.slice(); };
		}
		else {
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_53500[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(makeNimstrLit(" [")); } else { buf_53500[0] = makeNimstrLit(" ["); };
		add_50438(buf_53500, 0, e_53499.name);
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(makeNimstrLit("]\x0A")); } else { buf_53500[0] = makeNimstrLit("]\x0A"); };
		if (buf_53500[0] != null) { buf_53500[0] = (buf_53500[0]).concat(raw_write_stack_trace_53438()); } else { buf_53500[0] = raw_write_stack_trace_53438().slice(); };
		var cbuf_53601 = toJSStr(buf_53500[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_53601);
  }
  else {
    throw cbuf_53601;
  }
  

	
}

function raiseOverflow() {
		var e_53852 = null;
		e_53852 = {m_type: NTI40246, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_53852.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI36040);
		e_53852.parent = null;
		raiseException(e_53852, "OverflowError");

	
}

function is_whitespace_180639(text_180641) {
		     return !/[^\s]/.test(text_180641);
  

	
}

function is_whitespace_180656(x_180658) {
		var Tmp1;
		var Tmp2;

	var result_180659 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_180658.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_180639(x_180658.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_180658.nodeName == "#comment");		}		result_180659 = Tmp1;
	framePtr = F.prev;

	return result_180659;

}

function raiseIndexError(i_53925, a_53926, b_53927) {
		var e_53931 = null;
		e_53931 = {m_type: NTI40258, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_53931.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_53925)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_53926)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_53927)+"") || []), NTI36040);
		e_53931.parent = null;
		raiseException(e_53931, "IndexError");

	
}

function to_toc_180673(x_180675, father_180676) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_180675.nodeName == "UL")) {
		F.line = 139;
		var f_180695 = {heading: null, kids: [], sortId: (father_180676.kids != null ? father_180676.kids.length : 0), doSort: false};
		F.line = 140;
		var i_180697 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_180697 < x_180675.childNodes.length)) break L2;
					F.line = 142;
					var nxt_180698 = addInt(i_180697, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_180698 < x_180675.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_180656(x_180675.childNodes[nxt_180698]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_180698 = addInt(nxt_180698, 1);
							}
					} while(false);
						if (!(nxt_180698 < x_180675.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_180675.childNodes[i_180697].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_180675.childNodes[i_180697].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_180675.childNodes[nxt_180698].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_180723 = {heading: x_180675.childNodes[i_180697].childNodes[0], kids: [], sortId: (f_180695.kids != null ? f_180695.kids.length : 0), doSort: false};
					F.line = 148;
					var it_180724 = x_180675.childNodes[nxt_180698];
					L9: do {
						F.line = 149;
						var j_180731 = 0;
						F.line = 3090;
						var colontmp__181402 = 0;
						F.line = 149;
						colontmp__181402 = it_180724.childNodes.length;
						F.line = 3091;
						var i_181403 = 0;
						L10: do {
							F.line = 3092;
								L11: while (true) {
								if (!(i_181403 < colontmp__181402)) break L11;
									F.line = 149;
									j_180731 = i_181403;
									F.line = 150;
									to_toc_180673(it_180724.childNodes[j_180731], e_180723);
									F.line = 3094;
									i_181403 = addInt(i_181403, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_180695.kids != null) { f_180695.kids.push(e_180723); } else { f_180695.kids = [e_180723]; };
					F.line = 152;
					i_180697 = addInt(nxt_180698, 1);
					}
					else {
						F.line = 154;
						to_toc_180673(x_180675.childNodes[i_180697], f_180695);
						F.line = 155;
						i_180697 = addInt(i_180697, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_180676.kids != null) { father_180676.kids.push(f_180695); } else { father_180676.kids = [f_180695]; };
		}
		else {
		if (is_whitespace_180656(x_180675)) {
		}
		else {
		if ((x_180675.nodeName == "LI")) {
		F.line = 160;
		var idx_180766 = [];
		L12: do {
			F.line = 161;
			var i_180773 = 0;
			F.line = 3090;
			var colontmp__181407 = 0;
			F.line = 161;
			colontmp__181407 = x_180675.childNodes.length;
			F.line = 3091;
			var i_181408 = 0;
			L13: do {
				F.line = 3092;
					L14: while (true) {
					if (!(i_181408 < colontmp__181407)) break L14;
						F.line = 161;
						i_180773 = i_181408;
						if (!(is_whitespace_180656(x_180675.childNodes[i_180773]))) {
						F.line = 162;
						if (idx_180766 != null) { idx_180766.push(i_180773); } else { idx_180766 = [i_180773]; };
						}
						
						F.line = 3094;
						i_181408 = addInt(i_181408, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_180766 != null ? idx_180766.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_180675.childNodes[idx_180766[chckIndx(1, 0, idx_180766.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_180804 = {heading: x_180675.childNodes[idx_180766[chckIndx(0, 0, idx_180766.length+0-1)-0]], kids: [], sortId: (father_180676.kids != null ? father_180676.kids.length : 0), doSort: false};
		F.line = 166;
		var it_180805 = x_180675.childNodes[idx_180766[chckIndx(1, 0, idx_180766.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_180812 = 0;
			F.line = 3090;
			var colontmp__181413 = 0;
			F.line = 167;
			colontmp__181413 = it_180805.childNodes.length;
			F.line = 3091;
			var i_181414 = 0;
			L17: do {
				F.line = 3092;
					L18: while (true) {
					if (!(i_181414 < colontmp__181413)) break L18;
						F.line = 167;
						j_180812 = i_181414;
						F.line = 168;
						to_toc_180673(it_180805.childNodes[j_180812], e_180804);
						F.line = 3094;
						i_181414 = addInt(i_181414, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_180676.kids != null) { father_180676.kids.push(e_180804); } else { father_180676.kids = [e_180804]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_180826 = 0;
				F.line = 3090;
				var colontmp__181418 = 0;
				F.line = 171;
				colontmp__181418 = x_180675.childNodes.length;
				F.line = 3091;
				var i_181419 = 0;
				L20: do {
					F.line = 3092;
						L21: while (true) {
						if (!(i_181419 < colontmp__181418)) break L21;
							F.line = 171;
							i_180826 = i_181419;
							F.line = 172;
							to_toc_180673(x_180675.childNodes[i_180826], father_180676);
							F.line = 3094;
							i_181419 = addInt(i_181419, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_180676.kids != null) { father_180676.kids.push({heading: x_180675, kids: [], sortId: (father_180676.kids != null ? father_180676.kids.length : 0), doSort: false}); } else { father_180676.kids = [{heading: x_180675, kids: [], sortId: (father_180676.kids != null ? father_180676.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_180307(x_180309, heading_180310, items_180313, items_180313_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_180309 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_180309.heading == null))) Tmp1 = false; else {				Tmp1 = (x_180309.heading.textContent == heading_180310);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_180341 = 0;
			F.line = 3090;
			var colontmp__181443 = 0;
			F.line = 83;
			colontmp__181443 = (x_180309.kids != null ? x_180309.kids.length : 0);
			F.line = 3091;
			var i_181444 = 0;
			L3: do {
				F.line = 3092;
					L4: while (true) {
					if (!(i_181444 < colontmp__181443)) break L4;
						F.line = 83;
						i_180341 = i_181444;
						F.line = 84;
						if (items_180313[items_180313_Idx] != null) { items_180313[items_180313_Idx].push(x_180309.kids[chckIndx(i_180341, 0, x_180309.kids.length+0-1)-0].heading); } else { items_180313[items_180313_Idx] = [x_180309.kids[chckIndx(i_180341, 0, x_180309.kids.length+0-1)-0].heading]; };
						F.line = 3094;
						i_181444 = addInt(i_181444, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_180360 = 0;
				F.line = 3090;
				var colontmp__181448 = 0;
				F.line = 86;
				colontmp__181448 = (x_180309.kids != null ? x_180309.kids.length : 0);
				F.line = 3091;
				var i_181449 = 0;
				L6: do {
					F.line = 3092;
						L7: while (true) {
						if (!(i_181449 < colontmp__181448)) break L7;
							F.line = 86;
							i_180360 = i_181449;
							F.line = 87;
							var it_180361 = x_180309.kids[chckIndx(i_180360, 0, x_180309.kids.length+0-1)-0];
							F.line = 88;
							extract_items_180307(it_180361, heading_180310, items_180313, items_180313_Idx);
							F.line = 3094;
							i_181449 = addInt(i_181449, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_180020(tag_180022, kids_180024) {
	var result_180025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_180025 = document.createElement(toJSStr(tag_180022));
		L1: do {
			F.line = 12;
			var k_180056 = null;
			F.line = 2322;
			var i_181466 = 0;
			L2: do {
				F.line = 2323;
					L3: while (true) {
					if (!(i_181466 < (kids_180024 != null ? kids_180024.length : 0))) break L3;
						F.line = 12;
						k_180056 = kids_180024[chckIndx(i_181466, 0, kids_180024.length+0-1)-0];
						F.line = 13;
						result_180025.appendChild(k_180056);
						F.line = 2325;
						i_181466 = addInt(i_181466, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_180025;

}

function text_180122(s_180124) {
	var result_180125 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_180125 = document.createTextNode(s_180124);
	framePtr = F.prev;

	return result_180125;

}

function sys_fatal_57836(message_57840) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system.nim",line:0};
	framePtr = F;
		F.line = 3050;
		var e_57842 = null;
		F.line = 3051;
		e_57842 = {m_type: NTI40250, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 3052;
		e_57842.message = nimCopy(null, message_57840, NTI36040);
		F.line = 3053;
		raiseException(e_57842, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_57832(msg_57834) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../lib/system.nim",line:0};
	framePtr = F;
		F.line = 3768;
		sys_fatal_57836(msg_57834);
	framePtr = F.prev;

	
}

function failed_assert_impl_57875(msg_57877) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../lib/system.nim",line:0};
	framePtr = F;
		F.line = 3775;
		raise_assert_57832(msg_57877);
	framePtr = F.prev;

	
}

function uncovered_180920(x_180922) {
			var Tmp1;
		var Tmp2;

	var result_180923 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_180922.kids != null ? x_180922.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_180922.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_180922.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_180922;
		}
		else {
		Tmp2 = null;
		}
		
		result_180923 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_180923 = {heading: x_180922.heading, kids: [], sortId: x_180922.sortId, doSort: x_180922.doSort};
		L3: do {
			F.line = 197;
			var i_180961 = 0;
			F.line = 3090;
			var colontmp__181478 = 0;
			F.line = 197;
			colontmp__181478 = (x_180922.kids != null ? x_180922.kids.length : 0);
			F.line = 3091;
			var i_181479 = 0;
			L4: do {
				F.line = 3092;
					L5: while (true) {
					if (!(i_181479 < colontmp__181478)) break L5;
						F.line = 197;
						i_180961 = i_181479;
						F.line = 198;
						var y_180962 = uncovered_180920(x_180922.kids[chckIndx(i_180961, 0, x_180922.kids.length+0-1)-0]);
						if (!((y_180962 == null))) {
						F.line = 199;
						if (result_180923.kids != null) { result_180923.kids.push(y_180962); } else { result_180923.kids = [y_180962]; };
						}
						
						F.line = 3094;
						i_181479 = addInt(i_181479, 1);
					}
			} while(false);
		} while(false);
		if (((result_180923.kids != null ? result_180923.kids.length : 0) == 0)) {
		F.line = 200;
		result_180923 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_180923;

}

function merge_tocs_180996(orig_180998, news_180999) {
	var result_181000 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_181000 = uncovered_180920(orig_180998);
		if ((result_181000 == null)) {
		F.line = 205;
		result_181000 = news_180999;
		}
		else {
			L1: do {
				F.line = 207;
				var i_181020 = 0;
				F.line = 3090;
				var colontmp__181472 = 0;
				F.line = 207;
				colontmp__181472 = (news_180999.kids != null ? news_180999.kids.length : 0);
				F.line = 3091;
				var i_181473 = 0;
				L2: do {
					F.line = 3092;
						L3: while (true) {
						if (!(i_181473 < colontmp__181472)) break L3;
							F.line = 207;
							i_181020 = i_181473;
							F.line = 208;
							if (result_181000.kids != null) { result_181000.kids.push(news_180999.kids[chckIndx(i_181020, 0, news_180999.kids.length+0-1)-0]); } else { result_181000.kids = [news_180999.kids[chckIndx(i_181020, 0, news_180999.kids.length+0-1)-0]]; };
							F.line = 3094;
							i_181473 = addInt(i_181473, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_181000;

}

function build_toc_181041(orig_181043, types_181045, procs_181046) {
	var result_181047 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_181061 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_181214 = null;
			F.line = 3807;
			var i_181461 = 0;
			F.line = 3808;
			var l_181462 = (types_181045 != null ? types_181045.length : 0);
			L2: do {
				F.line = 3809;
					L3: while (true) {
					if (!(i_181461 < l_181462)) break L3;
						F.line = 212;
						t_181214 = types_181045[chckIndx(i_181461, 0, types_181045.length+0-1)-0];
						F.line = 213;
						var c_181228 = {heading: t_181214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_181214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_181235 = null;
							F.line = 3807;
							var i_181458 = 0;
							F.line = 3808;
							var l_181459 = (procs_181046 != null ? procs_181046.length : 0);
							L5: do {
								F.line = 3809;
									L6: while (true) {
									if (!(i_181458 < l_181459)) break L6;
										F.line = 215;
										p_181235 = procs_181046[chckIndx(i_181458, 0, procs_181046.length+0-1)-0];
										if (!(p_181235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_181236 = p_181235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_181236 != null ? xx_181236.length : 0) == 1) && (xx_181236[chckIndx(0, 0, xx_181236.length+0-1)-0].textContent == t_181214.textContent))) {
										F.line = 220;
										var q_181244 = tree_180020(makeNimstrLit("A"), [text_180122(p_181235.title)]);
										F.line = 221;
										q_181244.setAttribute("href", p_181235.getAttribute("href"));
										F.line = 222;
										if (c_181228.kids != null) { c_181228.kids.push({heading: q_181244, kids: [], sortId: 0, doSort: false}); } else { c_181228.kids = [{heading: q_181244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_181235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 3811;
										i_181458 = addInt(i_181458, 1);
										if (!(((procs_181046 != null ? procs_181046.length : 0) == l_181459))) {
										F.line = 3812;
										failed_assert_impl_57875(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system.nim(3812, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_181061.kids != null) { new_stuff_181061.kids.push(c_181228); } else { new_stuff_181061.kids = [c_181228]; };
						F.line = 3811;
						i_181461 = addInt(i_181461, 1);
						if (!(((types_181045 != null ? types_181045.length : 0) == l_181462))) {
						F.line = 3812;
						failed_assert_impl_57875(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system.nim(3812, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_181047 = merge_tocs_180996(orig_181043, new_stuff_181061);
	framePtr = F.prev;

	return result_181047;

}

function add_180070(parent_180072, kid_180073) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_180072.nodeName == "TR")) Tmp1 = false; else {				if ((kid_180073.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_180073.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_180074 = document.createElement("TD");
		F.line = 19;
		k_180074.appendChild(kid_180073);
		F.line = 20;
		parent_180072.appendChild(k_180074);
		}
		else {
			F.line = 22;
		parent_180072.appendChild(kid_180073);
		}
		
	framePtr = F.prev;

	
}

function set_class_180088(e_180090, value_180091) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_180090.setAttribute("class", toJSStr(value_180091));
	framePtr = F.prev;

	
}

function to_html_180375(x_180377, is_root_180378) {
			var Tmp1;

		function HEX3Aanonymous_180418(a_180420, b_180421) {
					var Tmp1;

			var result_180422 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_180420.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_180421.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_180439 = a_180420.heading.textContent;
				F.line = 107;
				var y_180440 = b_180421.heading.textContent;
				if ((x_180439 < y_180440)) {
				F.line = 108;
				result_180422 = -1;
				break BeforeRet;
				}
				
				if ((y_180440 < x_180439)) {
				F.line = 109;
				result_180422 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_180422 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_180422 = subInt(a_180420.sortId, b_180421.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_180422;

		}

	var result_180379 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_180377 == null)) {
		F.line = 91;
		result_180379 = null;
		break BeforeRet;
		}
		
		if (((x_180377.kids != null ? x_180377.kids.length : 0) == 0)) {
		if ((x_180377.heading == null)) {
		F.line = 93;
		result_180379 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_180379 = x_180377.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_180379 = tree_180020(makeNimstrLit("DIV"), []);
			if (!!((x_180377.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_180377.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_180070(result_180379, x_180377.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_180415 = tree_180020(makeNimstrLit("UL"), []);
		if (is_root_180378) {
		F.line = 100;
		set_class_180088(ul_180415, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_180088(ul_180415, makeNimstrLit("simple"));
		}
		
		if (x_180377.doSort) {
		F.line = 104;
		x_180377.kids.sort(HEX3Aanonymous_180418);
		}
		
		L2: do {
			F.line = 115;
			var k_180614 = null;
			F.line = 3805;
			var colontmp__181485 = null;
			F.line = 115;
			colontmp__181485 = x_180377.kids;
			F.line = 3807;
			var i_181487 = 0;
			F.line = 3808;
			var l_181488 = (colontmp__181485 != null ? colontmp__181485.length : 0);
			L3: do {
				F.line = 3809;
					L4: while (true) {
					if (!(i_181487 < l_181488)) break L4;
						F.line = 115;
						k_180614 = colontmp__181485[chckIndx(i_181487, 0, colontmp__181485.length+0-1)-0];
						F.line = 116;
						var y_180615 = to_html_180375(k_180614, false);
						if (!((y_180615 == null))) {
						F.line = 118;
						add_180070(ul_180415, tree_180020(makeNimstrLit("LI"), [y_180615]));
						}
						
						F.line = 3811;
						i_181487 = addInt(i_181487, 1);
						if (!(((colontmp__181485 != null ? colontmp__181485.length : 0) == l_181488))) {
						F.line = 3812;
						failed_assert_impl_57875(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system.nim(3812, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_180415.childNodes.length == 0))) {
		F.line = 119;
		add_180070(result_180379, ul_180415);
		}
		
		if ((result_180379.childNodes.length == 0)) {
		F.line = 120;
		result_180379 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_180379;

}

function replace_by_id_180142(id_180144, new_tree_180145) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_180146 = document.getElementById(id_180144);
		F.line = 33;
		x_180146.parentNode.replaceChild(new_tree_180145, x_180146);
		F.line = 34;
		new_tree_180145.id = id_180144;
	framePtr = F.prev;

	
}

function togglevis_181299(d_181301) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_181301.style.display == 'none')
      d_181301.style.display = 'inline';
    else
      d_181301.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_181317) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_181318 = document.getElementById("toc-list");
		if ((alternative_181285[0] == null)) {
		F.line = 240;
		var tt_181337 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_180673(toc_181318, tt_181337);
		F.line = 242;
		tt_181337 = tt_181337.kids[chckIndx(0, 0, tt_181337.kids.length+0-1)-0];
		F.line = 244;
		var types_181352 = [[]];
		F.line = 245;
		var procs_181367 = [[]];
		F.line = 247;
		extract_items_180307(tt_181337, "Types", types_181352, 0);
		F.line = 248;
		extract_items_180307(tt_181337, "Procs", procs_181367, 0);
		F.line = 249;
		extract_items_180307(tt_181337, "Converters", procs_181367, 0);
		F.line = 250;
		extract_items_180307(tt_181337, "Methods", procs_181367, 0);
		F.line = 251;
		extract_items_180307(tt_181337, "Templates", procs_181367, 0);
		F.line = 252;
		extract_items_180307(tt_181337, "Macros", procs_181367, 0);
		F.line = 253;
		extract_items_180307(tt_181337, "Iterators", procs_181367, 0);
		F.line = 255;
		var ntoc_181375 = build_toc_181041(tt_181337, types_181352[0], procs_181367[0]);
		F.line = 256;
		var x_181376 = to_html_180375(ntoc_181375, true);
		F.line = 257;
		alternative_181285[0] = tree_180020(makeNimstrLit("DIV"), [x_181376]);
		}
		
		if ((value_181317 == "type")) {
		F.line = 259;
		replace_by_id_180142("tocRoot", alternative_181285[0]);
		}
		else {
			F.line = 261;
		replace_by_id_180142("tocRoot", tree_180020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_181299(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_181491 = [null];
var contents_181493 = [null];
var oldtoc_181742 = [null];
var timer_181743 = [null];

function raiseRangeError() {
		var e_53902 = null;
		e_53902 = {m_type: NTI40262, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_53902.message = nimCopy(null, makeNimstrLit("value out of range"), NTI36040);
		e_53902.parent = null;
		raiseException(e_53902, "RangeError");

	
}

function nsuToLowerAsciiChar(c_170980) {
	var result_170981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_170980] != undefined)) {
		F.line = 222;
		result_170981 = chckRange(addInt(c_170980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_170981 = c_170980;
		}
		
	framePtr = F.prev;

	return result_170981;

}

function fuzzy_match_179070(pattern_179072, str_179073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_179077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_179078 = -100;
		F.line = 38;
		var header_matched_179079 = false;
		F.line = 39;
		var unmatched_leading_char_count_179081 = 0;
		F.line = 40;
		var consecutive_match_count_179083 = 0;
		F.line = 41;
		var str_index_179085 = 0;
		F.line = 42;
		var pat_index_179087 = 0;
		F.line = 43;
		var score_179089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_179085 < (str_179073 != null ? str_179073.length : 0)) && (pat_index_179087 < (pattern_179072 != null ? pattern_179072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_179096 = nsuToLowerAsciiChar(pattern_179072.charCodeAt(chckIndx(pat_index_179087, 0, pattern_179072.length+0-1)-0));
						F.line = 52;
						var str_char_179097 = nsuToLowerAsciiChar(str_179073.charCodeAt(chckIndx(str_index_179085, 0, str_179073.length+0-1)-0));
						if ((ConstSet3[pattern_char_179096] != undefined)) {
						F.line = 56;
						pat_index_179087 = addInt(pat_index_179087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_179097] != undefined)) {
						F.line = 59;
						str_index_179085 = addInt(str_index_179085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_179079) && (str_char_179097 == 58))) {
						F.line = 65;
						header_matched_179079 = true;
						F.line = 66;
						score_state_179078 = -100;
						F.line = 67;
						score_179089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_179089)));
						F.line = 68;
						pat_index_179087 = 0;
						F.line = 69;
						str_index_179085 = addInt(str_index_179085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_179097 == pattern_char_179096)) {
						F.line = 73;
						switch (score_state_179078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_179078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_179078 = 5;
							F.line = 78;
							score_179089 = addInt(score_179089, score_state_179078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_179083 = addInt(consecutive_match_count_179083, 1);
							F.line = 82;
							score_state_179078 = 5;
							F.line = 83;
							score_179089 = addInt(score_179089, mulInt(5, consecutive_match_count_179083));
							if ((score_state_179078 == 10)) {
							F.line = 86;
							score_179089 = addInt(score_179089, 10);
							}
							
							F.line = 88;
							var on_boundary_179172 = (pat_index_179087 == (pattern_179072 != null ? (pattern_179072.length-1) : -1));
							if ((!(on_boundary_179172) && (str_index_179085 < (str_179073 != null ? (str_179073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_179173 = nsuToLowerAsciiChar(pattern_179072.charCodeAt(chckIndx(addInt(pat_index_179087, 1), 0, pattern_179072.length+0-1)-0));
							F.line = 92;
							var next_str_char_179174 = nsuToLowerAsciiChar(str_179073.charCodeAt(chckIndx(addInt(str_index_179085, 1), 0, str_179073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_179174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_179174 == next_pattern_char_179173));							}							on_boundary_179172 = Tmp4;
							}
							
							if (on_boundary_179172) {
							F.line = 100;
							score_state_179078 = 20;
							F.line = 100;
							score_179089 = addInt(score_179089, score_state_179078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_179073.charCodeAt(chckIndx(subInt(str_index_179085, 1), 0, str_179073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_179073.charCodeAt(chckIndx(subInt(str_index_179085, 1), 0, str_179073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_179073.charCodeAt(chckIndx(str_index_179085, 0, str_179073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_179212 = Tmp5;
							if (is_leading_char_179212) {
							F.line = 110;
							score_state_179078 = 10;
							}
							else {
								F.line = 114;
								score_state_179078 = 0;
								F.line = 114;
								score_179089 = addInt(score_179089, score_state_179078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_179087 = addInt(pat_index_179087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_179078) {
							case -100:
								F.line = 120;
								score_state_179078 = -3;
								F.line = 120;
								score_179089 = addInt(score_179089, score_state_179078);
								break;
							case 5:
								F.line = 123;
								score_state_179078 = -1;
								F.line = 123;
								score_179089 = addInt(score_179089, score_state_179078);
								F.line = 124;
								consecutive_match_count_179083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_179081 < 3)) {
								F.line = 128;
								score_state_179078 = -3;
								F.line = 128;
								score_179089 = addInt(score_179089, score_state_179078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_179081 = addInt(unmatched_leading_char_count_179081, 1);
								break;
							default: 
								F.line = 132;
								score_state_179078 = -1;
								F.line = 132;
								score_179089 = addInt(score_179089, score_state_179078);
								break;
							}
						}
						
						F.line = 134;
						str_index_179085 = addInt(str_index_179085, 1);
					} while(false);
				}
		} while(false);
		F.line = 136;
		nimCopy(result_179077, {Field0: nimMax(0, score_179089), Field1: (0 < score_179089)}, NTI179074);
	framePtr = F.prev;

	return result_179077;

}

function text_180105(s_180107) {
	var result_180108 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_180108 = document.createTextNode(toJSStr(s_180107));
	framePtr = F.prev;

	return result_180108;

}

function dosearch_181510(value_181512) {

		function HEX3Aanonymous_181670(a_181679, b_181680) {
			var result_181684 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_181684 = subInt(b_181680["Field1"], a_181679["Field1"]);
			framePtr = F.prev;

			return result_181684;

		}

	var result_181513 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_181491[0] != null ? db_181491[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_181519 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_181519 = doc.documentElement;
    
		F.line = 286;
		db_181491[0] = nimCopy(null, stuff_181519.getElementsByClassName("reference"), NTI73245);
		F.line = 287;
		contents_181493[0] = nimCopy(null, [], NTI181532);
		L1: do {
			F.line = 288;
			var ahref_181614 = null;
			F.line = 3807;
			var i_181811 = 0;
			F.line = 3808;
			var l_181812 = (db_181491[0] != null ? db_181491[0].length : 0);
			L2: do {
				F.line = 3809;
					L3: while (true) {
					if (!(i_181811 < l_181812)) break L3;
						F.line = 288;
						ahref_181614 = db_181491[0][chckIndx(i_181811, 0, db_181491[0].length+0-1)-0];
						F.line = 289;
						if (contents_181493[0] != null) { contents_181493[0].push(ahref_181614.getAttribute("data-doc-search-tag")); } else { contents_181493[0] = [ahref_181614.getAttribute("data-doc-search-tag")]; };
						F.line = 3811;
						i_181811 = addInt(i_181811, 1);
						if (!(((db_181491[0] != null ? db_181491[0].length : 0) == l_181812))) {
						F.line = 3812;
						failed_assert_impl_57875(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system.nim(3812, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_181625 = tree_180020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_181513 = tree_180020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_180088(result_181513, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_181644 = [];
		L4: do {
			F.line = 294;
			var i_181656 = 0;
			F.line = 3090;
			var colontmp__181818 = 0;
			F.line = 294;
			colontmp__181818 = (db_181491[0] != null ? db_181491[0].length : 0);
			F.line = 3091;
			var i_181819 = 0;
			L5: do {
				F.line = 3092;
					L6: while (true) {
					if (!(i_181819 < colontmp__181818)) break L6;
						F.line = 294;
						i_181656 = i_181819;
						L7: do {
							F.line = 295;
							var c_181657 = contents_181493[0][chckIndx(i_181656, 0, contents_181493[0].length+0-1)-0];
							if (((c_181657 == "Examples") || (c_181657 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__181828 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_181658 = 0;
							F.line = 301;
							var matched_181659 = false;
							F.line = 301;
							nimCopy(colontmp__181828, fuzzy_match_179070(value_181512, c_181657), NTI179074);
							F.line = 301;
							score_181658 = colontmp__181828["Field0"];
							F.line = 301;
							matched_181659 = colontmp__181828["Field1"];
							if (matched_181659) {
							F.line = 303;
							if (matches_181644 != null) { matches_181644.push({Field0: db_181491[0][chckIndx(i_181656, 0, db_181491[0].length+0-1)-0], Field1: score_181658}); } else { matches_181644 = [{Field0: db_181491[0][chckIndx(i_181656, 0, db_181491[0].length+0-1)-0], Field1: score_181658}]; };
							}
							
						} while(false);
						F.line = 3094;
						i_181819 = addInt(i_181819, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_181644.sort(HEX3Aanonymous_181670);
		L8: do {
			F.line = 306;
			var i_181722 = 0;
			F.line = 3090;
			var colontmp__181824 = 0;
			F.line = 306;
			colontmp__181824 = nimMin((matches_181644 != null ? matches_181644.length : 0), 19);
			F.line = 3091;
			var i_181825 = 0;
			L9: do {
				F.line = 3092;
					L10: while (true) {
					if (!(i_181825 < colontmp__181824)) break L10;
						F.line = 306;
						i_181722 = i_181825;
						F.line = 307;
						matches_181644[chckIndx(i_181722, 0, matches_181644.length+0-1)-0]["Field0"].innerHTML = matches_181644[chckIndx(i_181722, 0, matches_181644.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_180070(ul_181625, tree_180020(makeNimstrLit("LI"), [matches_181644[chckIndx(i_181722, 0, matches_181644.length+0-1)-0]["Field0"]]));
						F.line = 3094;
						i_181825 = addInt(i_181825, 1);
					}
			} while(false);
		} while(false);
		if ((ul_181625.childNodes.length == 0)) {
		F.line = 310;
		add_180070(result_181513, tree_180020(makeNimstrLit("B"), [text_180105(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_180070(result_181513, tree_180020(makeNimstrLit("B"), [text_180105(makeNimstrLit("search results"))]));
			F.line = 313;
			add_180070(result_181513, ul_181625);
		}
		
	framePtr = F.prev;

	return result_181513;

}

function search() {

		function wrapper_181759() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_181761 = document.getElementById("searchInput");
				F.line = 321;
				var value_181762 = elem_181761.value;
				if (!(((value_181762 != null ? value_181762.length : 0) == 0))) {
				if ((oldtoc_181742[0] == null)) {
				F.line = 324;
				oldtoc_181742[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_181768 = dosearch_181510(value_181762);
				F.line = 326;
				replace_by_id_180142("tocRoot", results_181768);
				}
				else {
				if (!((oldtoc_181742[0] == null))) {
				F.line = 328;
				replace_by_id_180142("tocRoot", oldtoc_181742[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_181743[0] == null))) {
		F.line = 330;
		clearTimeout(timer_181743[0]);
		}
		
		F.line = 331;
		timer_181743[0] = setTimeout(wrapper_181759, 400);
	framePtr = F.prev;

	
}
